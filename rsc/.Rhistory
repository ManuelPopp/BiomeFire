data$Altitude <- factor(data$Altitude)
ggplot2::ggplot(data = data, ggplot2::aes(x = Overlap, y = Spacing, colour = Altitude)) +
ggplot2::geom_point()
ggplot2::ggplot(data = data, ggplot2::aes(x = Overlap, y = Spacing, colour = Altitude)) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
require("ggplot2")
data <- read.csv("C:/Users/poppman/Desktop/tmp/Tests.csv")
data$Altitude <- factor(data$Altitude)
ggplot2::ggplot(data = data, ggplot2::aes(x = Overlap, y = Spacing, colour = Altitude)) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
levels(data$Altitude)
for (lvl in levels(data$Altitude)) {
altitude <- as.numeric(as.character(lvl))
mod <- lm(Spacing ~ Overlap, data = data[which(data$Altitude == lvl),])
print(coefficients(mod))
}
coefficients(mod)[1]
parameter_df <- data.frame()
parameter_df <- data.frame()
for (lvl in levels(data$Altitude)) {
altitude <- as.numeric(as.character(lvl))
mod <- lm(Spacing ~ Overlap, data = data[which(data$Altitude == lvl),])
intercept <- coefficients(mod)[1]
slope <- coefficients(mod)[2]
df <- data.frame(altitude = altitude, intercept = intercept, slope = slope)
parameter_df <- rbind(parameter_df, df)
}
parameter_df
plot(intercept ~ altitude, data = parameter_df)
lm(intercept ~ altitude, data = parameter_df)
mi <- lm(intercept ~ altitude, data = parameter_df)
plot(mi)
plot(intercept ~ altitude, data = parameter_df)
plot(slope ~ altitude, data = parameter_df)
plot(intercept ~ altitude, data = parameter_df)
mi <- lm(intercept ~ altitude, data = parameter_df)
abline(a = coefficients(mi)[1], b = coefficients(mi)[2])
plot(slope ~ altitude, data = parameter_df)
ms <- lm(slope ~ altitude, data = parameter_df)
abline(a = coefficients(ms)[1], b = coefficients(ms)[2], col = "red")
altitude = 70
overlap = 70
spacing = coefficients(ms)[2] * altitude * overlap + coefficients(ms)[1] +
coefficients(mi)[2] * altitude + coefficients(mi)[1]
spacing
View(data)
altitude = 75
spacing = coefficients(ms)[2] * altitude * overlap + coefficients(ms)[1] +
coefficients(mi)[2] * altitude + coefficients(mi)[1]
spacing
coefficients(ms)[2]
coefficients(ms)[1]
coefficients(mi)[2]
coefficients(mi)[1]
coefficients(mi)[2] * altitude + coefficients(mi)[1]
View(data)
coefficients(ms)[2] * altitude * overlap + coefficients(ms)[1] +
coefficients(mi)[2] * altitude + coefficients(mi)[1]
coefficients(ms)[2] * altitude * overlap + coefficients(ms)[1] * overlap +
coefficients(mi)[2] * altitude + coefficients(mi)[1]
overlap
coefficients(ms)[2] * altitude * overlap +
coefficients(mi)[2] * altitude + coefficients(mi)[1]
coefficients(mi)[1]
coefficients(ms)[2] * altitude * overlap +
coefficients(mi)[2] * altitude
altitude
overlap
coefficients(ms)[2] * altitude * overlap +
coefficients(mi)[2] * altitude
View(data)
spacing
c1 <- coefficients(ms)[2]
c2 <- coefficients(mi)[2]
spacing <- c1 * altitude * overlap + c2 * altitude
spacing
overlap
(c1 * overlap / 100 + c2) * args.altitude * 100
(c1 * overlap / 100 + c2) * altitude * 100
horizontalfov <- 61.2
tan((horizontalfov / 2) * pi / 180
) * altitude * (2 - overlap)
tan((horizontalfov / 2) * pi / 180)
overlap
tan((horizontalfov / 2) * pi / 180) * altitude
tan((horizontalfov / 2) * pi / 180) * altitude * (2 - overlap / 100)
meta <- "C:/Users/poppman/Downloads/Metadata.csv"
f_meta <- "C:/Users/poppman/Downloads/Metadata.csv"
meta <- read.csv(f_meta)
meta
require("tiryr")
head(meta)
meta %>%
tidyr::pivot_wider(id_cols = "FlightID")
require("dplyr")
meta %>%
tidyr::pivot_wider(id_cols = "FlightID")
meta %>%
tidyr::pivot_wider(id_cols = c("FlightID"))
?pivot_wider
head(meta)
meta %>%
tidyr::pivot_wider(id_cols = c("FlightID"), names_from = "Variable", values_from = "Value")
meta %>%
tidyr::pivot_wider(id_cols = c("FlightID", "FileName"), names_from = "Variable", values_from = "Value")
meta_wide %>%
tidyr::pivot_wider(id_cols = c("FlightID", "FileName"), names_from = "Variable", values_from = "Value")
meta_wide <- meta %>%
tidyr::pivot_wider(id_cols = c("FlightID", "FileName"), names_from = "Variable", values_from = "Value")
meta <- read.csv(f_meta)
meta_wide <- meta %>%
tidyr::pivot_wider(id_cols = c("FlightID", "FileName"), names_from = "Variable", values_from = "Value")
writeClipboard(meta_wide)
f_meta_wide <- "C:/Users/poppman/Downloads/Metadata_wide.csv"
f_meta_wide)
write.csv(meta_fide, file = f_meta_wide)
write.csv(meta_wide, file = f_meta_wide)
dir <- "L:/poppman/data/bff/dat/lud11/climate_bin_data"
files <- list.files(dir, pattern = ".Rsave", full.names = TRUE)
data <- files[1]
f_data <- files[1]
load(f_data)
head(df_out)
burned <- df_out[which(df_out$Fire == 1),]
nonburned <- df_out[which(df_out$Fire == 0),]
burned
nonburned <- df_out[which(df_out$Fire == 0),]
df <- burned
df[, -1] <- burned[, -1] / nonburned[, -1]
df
df <- df[, -2]
df
head(df)
nrow(df)
df$Year <- factor(df$Year, levels = as.character(2001:2024))
df$Year <- 2001:2024
require("tidyr")
?pivot_longer
names(df[, -1])
dfl <- df %>%
tidyr::pivot_longer(
cols = tidyr::all_of(names(df[, -1]))
)
dfl
require("ggplot2")
require("tidyr")
dir <- "L:/poppman/data/bff/dat/lud11/climate_bin_data"
files <- list.files(dir, pattern = ".Rsave", full.names = TRUE)
f_data <- files[1]
load(f_data)
head(df_out)
burned <- df_out[which(df_out$Fire == 1),]
nonburned <- df_out[which(df_out$Fire == 0),]
df <- burned
df[, -1] <- burned[, -1] / nonburned[, -1]
df <- df[, -2]
df$Year <- 2002:2024
dfl <- df %>%
tidyr::pivot_longer(
cols = tidyr::all_of(names(df[, -1]))
)
dfl
ggplot2::ggplot(
data = df, ggplot2::aes(x = Year, y = Value)
) +
ggplot2::geom_point()
ggplot2::ggplot(
data = df, ggplot2::aes(x = Year, y = value)
) +
ggplot2::geom_point()
ggplot2::ggplot(
data = dfl, ggplot2::aes(x = Year, y = value)
) +
ggplot2::geom_point()
require("trend")
trend::mk.test(dfl$value)$p.val
trend::mk.test(dfl$value)
ggplot2::ggplot(
data = dfl, ggplot2::aes(x = Year, y = value, colour = name)
) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
dfl <- df %>%
tidyr::pivot_longer(
cols = tidyr::all_of(names(df[, -1]))
) %>%
dplyr::mutate(
Bin = factore(name)
)
dfl <- df %>%
tidyr::pivot_longer(
cols = tidyr::all_of(names(df[, -1]))
) %>%
dplyr::mutate(
Bin = factor(name)
)
ggplot2::ggplot(
data = dfl, ggplot2::aes(x = Year, y = value, colour = Bin)
) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
dfl
head(df)
## Email: manuel.popp@wsl.ch
##
## Date Created: 2025-01-10
##
## ---------------------------
##
## Descripton: Sample fire and non-fire points from predictor raster layers
##
#>----------------------------------------------------------------------------<|
#> Install/load packages
rm(list = ls())
import <- function(...) {
#' Import R packages. Install them if necessary.
#'
#' @param ... any argument that can be passed to install.packages.
#' @details The function installs only htoppackages that are missing. Packages
#' are loaded.
#' @examples
#' # Load packages
#' import("dplyr", "MASS", "terra", dependencies = TRUE)
#'
#' @seealso \code{\link[base]{install.packages}}
#' @export
args <- list(...)
packages = args[names(args) == ""]
kwargs = args[names(args) != ""]
for (package in packages) {
if (!require(package, character.only = TRUE)) {
do.call(install.packages, c(list(package), kwargs))
}
require(package, character.only = TRUE)
}
}
import(
"terra", "dplyr", "tidyterra", "tidyr", "parallel",
dependencies = TRUE
)
#>----------------------------------------------------------------------------<|
#> Functions
dfiles <- function(directory, year, ...) {
all_files <- list.files(directory, ...)
year_files <- all_files[grepl(paste0("_", year), all_files)]
return(file.path(directory, year_files))
}
files <- function(directories, year, ...) {
return(do.call(c, lapply(directories, FUN = dfiles, year = year, ...)))
}
#>----------------------------------------------------------------------------<|
#> Settings
args <- commandArgs(trailingOnly = TRUE)
recalculate <- TRUE
seed <- 42
set.seed(seed)
if (length(args) > 0) {
biome_name <- paste0("Olson_biome_", as.character(args[1]))
} else {
biome_name <- "Olson_biome_4"
}
if (Sys.info()["sysname"] == "Windows") {
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bff"
sub_clim <- "chelsa_kg"
dir_fire <- "L:/poppman/data/bff/dat/annual_fire_maps"
} else {
dir_main <- "/lud11/poppman/data/bff"
sub_clim <- file.path("lud11", "chelsa_kg")
dir_fire <- "/lud11/poppman/data/bff/dat/annual_fire_maps"
}
dir_dat <- file.path(dir_main, "dat")
dir_lud <- file.path(dir_dat, "lud11")
dir_ann <- file.path(dir_lud, "annual")
dir_stc <- file.path(dir_lud, "static")
wsl_cols <- c(
rgb(0, 102, 102, maxColorValue = 255),
"skyblue3"
)
# Directories
chelsa_climate <- file.path(dir_stc, "chelsa_1981-2010", "vpd_clim.tif")
# Response
f_fire <- list.files(dir_fire, pattern = ".tif", full.names = TRUE)
f_biome <- file.path(dir_lud, "biomes", paste0(biome_name, ".tif"))
# Mask layers
if(biome_name %in% c("Olson_biome_1", "Olson_biome_2")) {
pft_maskfile <- "broadmix_mask_MODIS.tif"
} else if(biome_name == "Olson_biome_4") {
pft_maskfile <- "mixedforest_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_3", "Olson_biome_5", "Olson_biome_6")
) {
pft_maskfile <- "evergr_needleleaf_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_7", "Olson_biome_8", "Olson_biome_9")
) {
pft_maskfile <- "savanna_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_10", "Olson_biome_11")
) {
pft_maskfile <- "montane_mask_MODIS.tif"
} else if (biome_name == "Olson_biome_12") {
pft_maskfile <- "mediterra_mask_MODIS.tif"
} else if (biome_name == "Olson_biome_13") {
pft_maskfile <- "desert_mask_MODIS.tif"
}
f_pft <- file.path(
dir_lud, "masks", pft_maskfile
)
#>----------------------------------------------------------------------------<|
#> Load fire and mask layers
fire <- terra::rast(f_fire)
pft <- terra::rast(f_pft)
biome <- terra::rast(f_biome)
# Get biome extent and sampling area extent
print("Get study extent...")
biome_extent <- terra::trim(biome) %>%
terra::ext()
extent <- terra::crop(pft, biome_extent) %>%
terra::trim() %>%
terra::ext()
# Crop layers
print("Cropping layers...")
fire_cropped <- terra::crop(fire, extent)
biome_cropped <- terra::crop(biome, extent)
pft_cropped <- terra::crop(pft, extent)
#>----------------------------------------------------------------------------<|
#> Load environmental variables
print("Loading predictor...")
predictor <- terra::rast(chelsa_climate) %>%
terra::crop(extent)
p <- quantile(terra::values(predictor), probs = seq(0, 1, 0.1), na.rm = TRUE)
p[1] <- p[1] - 1
p[11] <- p[11] + 1
mat <- cbind(p[-11], p[-1], 1:10)
predictor_binned <- terra::classify(predictor, mat)
mat
mat[, 3]
for (bin in mat[, 3]) {print(bin)}
df_out <- NULL
# Create combined mask
print("Creating predictor mask...")
pred_mask <- (predictor == bin) %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2)) %>%
terra::crop(extent)
plot(pred_mask)
plot(predictor == bin)
plot(predictor)
plot(predictor_binned)
pred_mask <- (predictor_binned == bin) %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2)) %>%
terra::crop(extent)
plot(pred_mask)
mask_combined <- c(biome_cropped, pft_cropped) %>%
terra::app(fun = "anyNA") %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2))
#!/usr/bin/env Rscript
#>------------------------------------<
##
## Script name: Sample predictors
##
## Author: Manuel R. Popp
## Email: manuel.popp@wsl.ch
##
## Date Created: 2025-01-10
##
## ---------------------------
##
## Descripton: Sample fire and non-fire points from predictor raster layers
##
#>----------------------------------------------------------------------------<|
#> Install/load packages
rm(list = ls())
import <- function(...) {
#' Import R packages. Install them if necessary.
#'
#' @param ... any argument that can be passed to install.packages.
#' @details The function installs only htoppackages that are missing. Packages
#' are loaded.
#' @examples
#' # Load packages
#' import("dplyr", "MASS", "terra", dependencies = TRUE)
#'
#' @seealso \code{\link[base]{install.packages}}
#' @export
args <- list(...)
packages = args[names(args) == ""]
kwargs = args[names(args) != ""]
for (package in packages) {
if (!require(package, character.only = TRUE)) {
do.call(install.packages, c(list(package), kwargs))
}
require(package, character.only = TRUE)
}
}
import(
"terra", "dplyr", "tidyterra", "tidyr", "parallel",
dependencies = TRUE
)
#>----------------------------------------------------------------------------<|
#> Functions
dfiles <- function(directory, year, ...) {
all_files <- list.files(directory, ...)
year_files <- all_files[grepl(paste0("_", year), all_files)]
return(file.path(directory, year_files))
}
files <- function(directories, year, ...) {
return(do.call(c, lapply(directories, FUN = dfiles, year = year, ...)))
}
#>----------------------------------------------------------------------------<|
#> Settings
args <- commandArgs(trailingOnly = TRUE)
recalculate <- TRUE
seed <- 42
set.seed(seed)
if (length(args) > 0) {
biome_name <- paste0("Olson_biome_", as.character(args[1]))
} else {
biome_name <- "Olson_biome_4"
}
if (Sys.info()["sysname"] == "Windows") {
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bff"
sub_clim <- "chelsa_kg"
dir_fire <- "L:/poppman/data/bff/dat/annual_fire_maps"
} else {
dir_main <- "/lud11/poppman/data/bff"
sub_clim <- file.path("lud11", "chelsa_kg")
dir_fire <- "/lud11/poppman/data/bff/dat/annual_fire_maps"
}
dir_dat <- file.path(dir_main, "dat")
dir_lud <- file.path(dir_dat, "lud11")
dir_ann <- file.path(dir_lud, "annual")
dir_stc <- file.path(dir_lud, "static")
wsl_cols <- c(
rgb(0, 102, 102, maxColorValue = 255),
"skyblue3"
)
# Directories
chelsa_climate <- file.path(dir_stc, "chelsa_1981-2010", "vpd_clim.tif")
# Response
f_fire <- list.files(dir_fire, pattern = ".tif", full.names = TRUE)
f_biome <- file.path(dir_lud, "biomes", paste0(biome_name, ".tif"))
# Mask layers
if(biome_name %in% c("Olson_biome_1", "Olson_biome_2")) {
pft_maskfile <- "broadmix_mask_MODIS.tif"
} else if(biome_name == "Olson_biome_4") {
pft_maskfile <- "mixedforest_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_3", "Olson_biome_5", "Olson_biome_6")
) {
pft_maskfile <- "evergr_needleleaf_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_7", "Olson_biome_8", "Olson_biome_9")
) {
pft_maskfile <- "savanna_mask_MODIS.tif"
} else if (
biome_name %in% c("Olson_biome_10", "Olson_biome_11")
) {
pft_maskfile <- "montane_mask_MODIS.tif"
} else if (biome_name == "Olson_biome_12") {
pft_maskfile <- "mediterra_mask_MODIS.tif"
} else if (biome_name == "Olson_biome_13") {
pft_maskfile <- "desert_mask_MODIS.tif"
}
f_pft <- file.path(
dir_lud, "masks", pft_maskfile
)
#>----------------------------------------------------------------------------<|
#> Load fire and mask layers
fire <- terra::rast(f_fire)
pft <- terra::rast(f_pft)
biome <- terra::rast(f_biome)
# Get biome extent and sampling area extent
print("Get study extent...")
biome_extent <- terra::trim(biome) %>%
terra::ext()
extent <- terra::crop(pft, biome_extent) %>%
terra::trim() %>%
terra::ext()
# Crop layers
print("Cropping layers...")
fire_cropped <- terra::crop(fire, extent)
biome_cropped <- terra::crop(biome, extent)
pft_cropped <- terra::crop(pft, extent)
mask_combined <- c(biome_cropped, pft_cropped) %>%
terra::app(fun = "anyNA") %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2))
#>----------------------------------------------------------------------------<|
#> Load environmental variables
print("Loading predictor...")
predictor <- terra::rast(chelsa_climate) %>%
terra::crop(extent) %>%
terra::mask(mask_combined)
p <- quantile(terra::values(predictor), probs = seq(0, 1, 0.1), na.rm = TRUE)
p[1] <- p[1] - 1
p[11] <- p[11] + 1
mat <- cbind(p[-11], p[-1], 1:10)
predictor_binned <- terra::classify(predictor, mat)
plot(predictor_binned)
df_out <- NULL
# Create combined mask
print("Creating predictor mask...")
pred_mask <- (predictor_binned == bin) %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2))
for (bin in mat[, 3]) {
}
pred_mask <- (predictor_binned == bin) %>%
terra::classify(rcl = matrix(c(0, 1, 0, NA), ncol = 2))
plot(pred_mask)
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bff/git/BiomeFire/rsc")
dir_lud
